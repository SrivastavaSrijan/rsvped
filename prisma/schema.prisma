datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ---------- Core identities ----------
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  // A user can both host and attend events
  hostedEvents Event[]  @relation("Host")
  rsvps        Rsvp[]
  createdAt    DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

/**
 * ---------- Event & taxonomy ----------
 */

model Event {
  id          String  @id @default(cuid())
  slug        String  @unique // pretty URLs
  title       String
  subtitle    String?
  description String? @db.Text
  coverImage  String? // CDN URL

  startDate DateTime
  endDate   DateTime
  timezone  String // e.g. "Asia/Kolkata"

  locationType LocationType
  venueName    String? // only if physical
  venueAddress String? // "
  onlineUrl    String? // only if virtual

  capacity    Int? // null = unlimited
  isPublished Boolean     @default(false)
  status      EventStatus @default(DRAFT)

  hostId String
  host   User   @relation("Host", fields: [hostId], references: [id], onDelete: Cascade)

  categories  EventCategory[] // many-to-many
  ticketTiers TicketTier[]
  rsvps       Rsvp[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum LocationType {
  PHYSICAL
  ONLINE
  HYBRID
}

/**
 * ---------- Categories (tags) ----------
 */

model Category {
  id     String          @id @default(cuid())
  name   String          @unique
  slug   String          @unique
  events EventCategory[]
}

model EventCategory {
  eventId    String
  categoryId String
  event      Event    @relation(fields: [eventId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([eventId, categoryId]) // composite PK
}

/**
 * ---------- Ticketing ----------
 */

model TicketTier {
  id            String @id @default(cuid())
  eventId       String
  name          String // e.g. “General”, “VIP”
  priceCents    Int // 0 for free tickets
  quantityTotal Int? // null = unlimited
  quantitySold  Int    @default(0)

  event Event  @relation(fields: [eventId], references: [id])
  rsvps Rsvp[]

  @@index([eventId])
}

/**
 * ---------- RSVP / Attendance ----------
 */

model Rsvp {
  id           String       @id @default(cuid())
  eventId      String
  ticketTierId String?
  userId       String? // null if guest checkout
  email        String
  name         String?
  status       RsvpStatus   @default(CONFIRMED) // wait-list etc.
  paymentState PaymentState @default(NONE)

  event      Event       @relation(fields: [eventId], references: [id])
  ticketTier TicketTier? @relation(fields: [ticketTierId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  checkIn    CheckIn?

  createdAt DateTime @default(now())

  @@index([eventId, email])
}

enum RsvpStatus {
  CONFIRMED
  CANCELLED
  WAITLIST
}

enum PaymentState {
  NONE // free ticket
  PENDING // Stripe intent created
  PAID
  REFUNDED
}

model CheckIn {
  id        String   @id @default(cuid())
  rsvpId    String   @unique
  scannedAt DateTime @default(now())
  rsvp      Rsvp     @relation(fields: [rsvpId], references: [id])
}
