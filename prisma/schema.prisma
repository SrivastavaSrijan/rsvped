// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  website     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events  Event[]
  members OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             String @id @default(cuid())
  organizationId String
  userId         String
  role           Role   @default(MEMBER)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  organizationMembers OrganizationMember[]
  rsvps               RSVP[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id             String      @id @default(cuid())
  slug           String      @unique
  title          String
  description    String?     @db.Text
  startDateTime  DateTime
  endDateTime    DateTime?
  timezone       String      @default("UTC")
  location       String?
  capacity       Int?
  isPublic       Boolean     @default(true)
  status         EventStatus @default(DRAFT)
  featuredImage  String?
  organizationId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  rsvps        RSVP[]
  ticketTiers  TicketTier[]
  checkIns     CheckIn[]

  @@map("events")
}

model TicketTier {
  id          String  @id @default(cuid())
  eventId     String
  name        String
  description String?
  price       Int     @default(0) // Price in cents
  capacity    Int?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  event Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  rsvps RSVP[]

  @@map("ticket_tiers")
}

model RSVP {
  id           String     @id @default(cuid())
  eventId      String
  userId       String?
  ticketTierId String
  email        String
  name         String
  status       RSVPStatus @default(CONFIRMED)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  event      Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticketTier TicketTier @relation(fields: [ticketTierId], references: [id], onDelete: Cascade)
  checkIns   CheckIn[]

  @@unique([eventId, email])
  @@map("rsvps")
}

model CheckIn {
  id          String   @id @default(cuid())
  rsvpId      String
  eventId     String
  checkedInAt DateTime @default(now())

  rsvp  RSVP  @relation(fields: [rsvpId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([rsvpId])
  @@map("check_ins")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum RSVPStatus {
  CONFIRMED
  CANCELLED
  WAITLISTED
}
